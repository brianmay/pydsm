#!/usr/bin/python
import ConfigParser
import subprocess
import select
import sys
import os
import string

debug = False

config = ConfigParser.RawConfigParser()
config.read('/root/pydsm/pydsm.conf')

user = config.get('main', 'user')
password = config.get('main', 'password')

if len(sys.argv) <= 1:
    raise RuntimeError("Not enough parameters")

cmd = [ "/usr/bin/dsmadmc", "-id=%s"%user, "-password=%s"%password, "-comma",  string.join(sys.argv[1::]) ]
process = subprocess.Popen(cmd, stdout=subprocess.PIPE)

if False:
    read_set = []
    write_set = []
    read_set.append(process.stdout)
    #read_set.append(process.stderr)

    while read_set or write_set:
        try:
            rlist, wlist, xlist = select.select(read_set, write_set, [])
        except select.error, e:
            if e.args[0] == errno.EINTR:
                continue
            raise

        if process.stdout in rlist:
            data = os.read(process.stdout.fileno(), 1024)
            sys.stdout.write(data)
            if data == "":
                process.stdout.close()
                read_set.remove(process.stdout)

        if process.stderr in rlist:
            data = os.read(process.stderr.fileno(), 1024)
            sys.stdout.write(data)
            if data == "":
                process.stderr.close()
                read_set.remove(process.stderr)

state="prefix"
for line in process.stdout:
    if debug: print "%s[[%s]]"%(state,line.rstrip())

    if state=="prefix":
        # ANS8000I Server command: 'query mount'
        if line[0:9] == "ANS8000I ":
            state="content"
    elif state=="content":
        # ANR2034E QUERY MOUNT: No match found using this criteria.
        if line[0:9] == "ANR2034E ":
            pass
        elif line == "\n":
            state="blankline"
        else:
            sys.stdout.write(line)
    elif state=="blankline":
        # ANS8002I Highest return code was 0.
        if line[0:9] == "ANS8002I ":
            state="postfix"
        else:
            sys.stdout.write("\n")
            state="content"
    elif state=="postfix":
        pass
    else:
        raise RuntimeError('Unknown state %s'%state)

retcode = process.wait()
if retcode:
    sys.stderr.write("Command '%s' returned non-zero exit status %d\n" % (" ".join(cmd), retcode))
    sys.exit(retcode)

sys.exit(0)

